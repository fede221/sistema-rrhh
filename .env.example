# ==========================================
# CONFIGURACIÓN DE VARIABLES DE ENTORNO
# ==========================================
# ⚠️ IMPORTANTE: NO subir este archivo con valores reales a Git
# 1. Copia este archivo: cp .env.example .env
# 2. Completa con tus credenciales reales
# 3. Verifica que .env está en .gitignore

# ==========================================
# BASE DE DATOS MYSQL
# ==========================================
DB_HOST=tu_servidor_mysql
DB_USER=tu_usuario_mysql_NO_ROOT
DB_PASSWORD=tu_password_seguro_minimo_16_caracteres
DB_NAME=RRHH
DB_PORT=3306

# 🔒 BUENAS PRÁCTICAS:
# - Nunca uses usuario 'root' para aplicaciones
# - Crea un usuario específico con permisos limitados
# - Usa contraseñas de al menos 16 caracteres con letras, números y símbolos
# - Ejemplo SQL para crear usuario:
#   CREATE USER 'rrhh_app'@'%' IDENTIFIED BY 'password_fuerte_aqui';
#   GRANT SELECT, INSERT, UPDATE, DELETE ON RRHH.* TO 'rrhh_app'@'%';
#   FLUSH PRIVILEGES;

# ==========================================
# JWT SECRET (CRÍTICO)
# ==========================================
# Genera un JWT_SECRET seguro con este comando:
# node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=GENERA_UN_SECRET_ALEATORIO_DE_128_CARACTERES_CON_EL_COMANDO_DE_ARRIBA

# ⚠️ El JWT_SECRET debe ser:
# - Mínimo 64 bytes (128 caracteres en hexadecimal)
# - Completamente aleatorio
# - NUNCA reutilizar entre ambientes (dev, staging, prod)
# - Rotarlo periódicamente (cada 6 meses)

# ==========================================
# CORS (Control de Acceso)
# ==========================================
CORS_ORIGIN=http://localhost:3002,https://tu-dominio.com

# 🔒 En producción, especifica SOLO tu dominio real:
# CORS_ORIGIN=https://rrhh.tuempresa.com

# ==========================================
# FRONTEND (Solo para desarrollo)
# ==========================================
REACT_APP_API_URL=http://localhost:3001

# 🔒 En producción, el frontend usa rutas relativas (nginx proxy)

# ==========================================
# RATE LIMITING (Protección contra ataques)
# ==========================================
# Configuración de límites de solicitudes para prevenir:
# - Ataques de fuerza bruta en login
# - Ataques DoS (Denial of Service)
# - Enumeración de usuarios
# - Abuso de recursos

# Rate limiting para LOGIN (más estricto)
# Ventana de tiempo en milisegundos (default: 15 minutos = 900000ms)
AUTH_RATE_WINDOW_MS=900000
# Máximo de intentos de login por ventana (default: 5)
AUTH_RATE_MAX_REQUESTS=5

# Rate limiting para RECUPERACIÓN DE CONTRASEÑA
# Ventana de tiempo (default: 1 hora = 3600000ms)
PASSWORD_RECOVERY_WINDOW_MS=3600000
# Máximo de intentos (default: 3)
PASSWORD_RECOVERY_MAX_REQUESTS=3

# Rate limiting GENERAL para toda la API
# Ventana de tiempo (default: 15 minutos)
API_RATE_WINDOW_MS=900000
# Máximo de requests generales (default: 100)
API_RATE_MAX_REQUESTS=100

# Rate limiting para operaciones de ESCRITURA (POST/PUT/DELETE)
# Ventana de tiempo (default: 15 minutos)
WRITE_RATE_WINDOW_MS=900000
# Máximo de operaciones de escritura (default: 50)
WRITE_RATE_MAX_REQUESTS=50

# Rate limiting para UPLOADS de archivos
# Ventana de tiempo (default: 1 hora)
UPLOAD_RATE_WINDOW_MS=3600000
# Máximo de uploads (default: 10)
UPLOAD_RATE_MAX_REQUESTS=10

# 💡 RECOMENDACIONES:
# - En producción, mantén valores conservadores
# - En desarrollo, puedes aumentar los límites
# - Monitorea logs para ajustar según uso real
# - Si omites estas variables, se usan los valores por defecto
